"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.injectPlugins = void 0;
const fs_1 = require("fs");
const path = __importStar(require("path"));
const semver_1 = __importDefault(require("semver"));
const url_1 = require("url");
const _shared_1 = require("./_shared");
const { VERCEL_CLI_VERSION } = process.env;
const PLUGINS = [
    '@vercel/gatsby-plugin-vercel-analytics',
    '@vercel/gatsby-plugin-vercel-builder',
];
const GATSBY_CONFIG_FILE = 'gatsby-config';
const GATSBY_NODE_FILE = 'gatsby-node';
async function injectPlugins(detectedVersion, dir) {
    const plugins = new Set();
    if (process.env.VERCEL_GATSBY_BUILDER_PLUGIN && detectedVersion) {
        const version = semver_1.default.coerce(detectedVersion);
        if (version && semver_1.default.satisfies(version, '>=4.0.0')) {
            plugins.add('@vercel/gatsby-plugin-vercel-builder');
        }
    }
    if (process.env.VERCEL_ANALYTICS_ID) {
        process.env.GATSBY_VERCEL_ANALYTICS_ID = process.env.VERCEL_ANALYTICS_ID;
        plugins.add('@vercel/gatsby-plugin-vercel-analytics');
    }
    if (plugins.size === 0) {
        return false;
    }
    const ops = [addGatsbyPackage(dir, plugins)];
    if (plugins.has('@vercel/gatsby-plugin-vercel-analytics')) {
        ops.push(updateGatsbyConfig(dir, ['@vercel/gatsby-plugin-vercel-analytics']));
    }
    if (plugins.has('@vercel/gatsby-plugin-vercel-builder')) {
        ops.push(updateGatsbyNode(dir));
    }
    await Promise.all(ops);
    return true;
}
exports.injectPlugins = injectPlugins;
function printInjectingPlugins(plugins, configPath) {
    const pluginsArray = Array.from(plugins);
    let pluginsStr = 'plugin';
    if (pluginsArray.length > 1) {
        pluginsStr += 's';
    }
    console.log(`Injecting Gatsby.js ${pluginsStr} ${pluginsArray
        .map(p => `"${p}"`)
        .join(', ')} to \`${configPath}\``);
}
async function addGatsbyPackage(dir, plugins) {
    const pkgJson = (await _shared_1.readPackageJson(dir));
    if (!pkgJson.dependencies) {
        pkgJson.dependencies = {};
    }
    for (const plugin of plugins) {
        if (!pkgJson.dependencies[plugin]) {
            console.log(`Adding "${plugin}" to \`package.json\` "dependencies"`);
            let version = 'latest';
            // Use the tarball URL for E2E tests
            if (VERCEL_CLI_VERSION?.startsWith('https://')) {
                version = new url_1.URL(`./${plugin}.tgz`, VERCEL_CLI_VERSION).href;
            }
            pkgJson.dependencies[plugin] = version;
        }
    }
    await _shared_1.writePackageJson(dir, pkgJson);
}
async function updateGatsbyConfig(dir, plugins) {
    const gatsbyConfigPathTs = path.join(dir, `${GATSBY_CONFIG_FILE}.ts`);
    const gatsbyConfigPathMjs = path.join(dir, `${GATSBY_CONFIG_FILE}.mjs`);
    const gatsbyConfigPathJs = path.join(dir, `${GATSBY_CONFIG_FILE}.js`);
    if (await _shared_1.fileExists(gatsbyConfigPathTs)) {
        printInjectingPlugins(plugins, gatsbyConfigPathTs);
        await updateGatsbyConfigTs(gatsbyConfigPathTs, plugins);
    }
    else if (await _shared_1.fileExists(gatsbyConfigPathMjs)) {
        printInjectingPlugins(plugins, gatsbyConfigPathMjs);
        await updateGatsbyConfigMjs(gatsbyConfigPathMjs, plugins);
    }
    else {
        printInjectingPlugins(plugins, gatsbyConfigPathJs);
        if (await _shared_1.fileExists(gatsbyConfigPathJs)) {
            await updateGatsbyConfigJs(gatsbyConfigPathJs, plugins);
        }
        else {
            await fs_1.promises.writeFile(gatsbyConfigPathJs, `module.exports = ${JSON.stringify({
                plugins: Array.from(plugins),
            })}`);
        }
    }
}
async function updateGatsbyConfigTs(configPath, plugins) {
    const renamedPath = `${configPath}.__vercel_builder_backup__.ts`;
    if (!(await _shared_1.fileExists(renamedPath))) {
        await fs_1.promises.rename(configPath, renamedPath);
    }
    await fs_1.promises.writeFile(configPath, `import userConfig from "./gatsby-config.ts.__vercel_builder_backup__.ts";
import type { PluginRef } from "gatsby";

const preferDefault = (m: any) => (m && m.default) || m;

const vercelConfig = Object.assign(
  {},
  preferDefault(userConfig)
);

if (!vercelConfig.plugins) {
  vercelConfig.plugins = [];
}

for (const plugin of ${JSON.stringify(Array.from(plugins))}) {
  const hasPlugin = vercelConfig.plugins.find(
    (p: PluginRef) =>
      p && (p === plugin || p.resolve === plugin)
  );

  if (!hasPlugin) {
    vercelConfig.plugins = vercelConfig.plugins.slice();
    vercelConfig.plugins.push(plugin);
  }
}

export default vercelConfig;
`);
}
async function updateGatsbyConfigMjs(configPath, plugins) {
    const renamedPath = `${configPath}.__vercel_builder_backup__.mjs`;
    if (!(await _shared_1.fileExists(renamedPath))) {
        await fs_1.promises.rename(configPath, renamedPath);
    }
    await fs_1.promises.writeFile(configPath, `import userConfig from "./gatsby-config.mjs.__vercel_builder_backup__.mjs";

const preferDefault = (m) => (m && m.default) || m;

const vercelConfig = Object.assign(
  {},
  preferDefault(userConfig)
);
if (!vercelConfig.plugins) {
  vercelConfig.plugins = [];
}

for (const plugin of ${JSON.stringify(Array.from(plugins))}) {
  const hasPlugin = vercelConfig.plugins.find(
    (p) => p && (p === plugin || p.resolve === plugin)
  );

  if (!hasPlugin) {
    vercelConfig.plugins = vercelConfig.plugins.slice();
    vercelConfig.plugins.push(plugin);
  }
}

export default vercelConfig;
`);
}
async function updateGatsbyConfigJs(configPath, plugins) {
    const renamedPath = `${configPath}.__vercel_builder_backup__.js`;
    if (!(await _shared_1.fileExists(renamedPath))) {
        await fs_1.promises.rename(configPath, renamedPath);
    }
    await fs_1.promises.writeFile(configPath, `const userConfig = require("./gatsby-config.js.__vercel_builder_backup__.js");

const preferDefault = m => (m && m.default) || m;

const vercelConfig = Object.assign(
  {},
  preferDefault(userConfig)
);
if (!vercelConfig.plugins) {
  vercelConfig.plugins = [];
}

for (const plugin of ${JSON.stringify(Array.from(plugins))}) {
  const hasPlugin = vercelConfig.plugins.find(
    (p) => p && (p === plugin || p.resolve === plugin)
  );

  if (!hasPlugin) {
    vercelConfig.plugins = vercelConfig.plugins.slice();
    vercelConfig.plugins.push(plugin);
  }
}
module.exports = vercelConfig;
`);
}
async function updateGatsbyNode(dir) {
    const gatsbyNodePathTs = path.join(dir, `${GATSBY_NODE_FILE}.ts`);
    const gatsbyNodePathMjs = path.join(dir, `${GATSBY_NODE_FILE}.mjs`);
    const gatsbyNodePathJs = path.join(dir, `${GATSBY_NODE_FILE}.js`);
    if (await _shared_1.fileExists(gatsbyNodePathTs)) {
        await updateGatsbyNodeTs(gatsbyNodePathTs);
    }
    else if (await _shared_1.fileExists(gatsbyNodePathMjs)) {
        await updateGatsbyNodeMjs(gatsbyNodePathMjs);
    }
    else if (await _shared_1.fileExists(gatsbyNodePathJs)) {
        await updateGatsbyNodeJs(gatsbyNodePathJs);
    }
    else {
        await fs_1.promises.writeFile(gatsbyNodePathJs, `module.exports = require('@vercel/gatsby-plugin-vercel-builder/gatsby-node.js');`);
    }
}
async function updateGatsbyNodeTs(configPath) {
    const renamedPath = `${configPath}.__vercel_builder_backup__.ts`;
    if (!(await _shared_1.fileExists(renamedPath))) {
        await fs_1.promises.rename(configPath, renamedPath);
    }
    await fs_1.promises.writeFile(configPath, `import type { GatsbyNode } from 'gatsby';
import * as vercelBuilder from '@vercel/gatsby-plugin-vercel-builder/gatsby-node.js';
import * as gatsbyNode from './gatsby-node.ts.__vercel_builder_backup__.ts';

export * from './gatsby-node.ts.__vercel_builder_backup__.ts';

export const onPostBuild: GatsbyNode['onPostBuild'] = async (args, options) => {
  if (typeof (gatsbyNode as any).onPostBuild === 'function') {
    await (gatsbyNode as any).onPostBuild(args, options);
  }
  await vercelBuilder.onPostBuild(args, options);
};
`);
}
async function updateGatsbyNodeMjs(configPath) {
    const renamedPath = `${configPath}.__vercel_builder_backup__.mjs`;
    if (!(await _shared_1.fileExists(renamedPath))) {
        await fs_1.promises.rename(configPath, renamedPath);
    }
    await fs_1.promises.writeFile(configPath, `import * as vercelBuilder from '@vercel/gatsby-plugin-vercel-builder/gatsby-node.js';
import * as gatsbyNode from './gatsby-node.mjs.__vercel_builder_backup__.mjs';

export * from './gatsby-node.mjs.__vercel_builder_backup__.mjs';

export const onPostBuild = async (args, options) => {
  if (typeof gatsbyNode.onPostBuild === 'function') {
    await gatsbyNode.onPostBuild(args, options);
  }
  await vercelBuilder.onPostBuild(args, options);
};
`);
}
async function updateGatsbyNodeJs(configPath) {
    const renamedPath = `${configPath}.__vercel_builder_backup__.js`;
    if (!(await _shared_1.fileExists(renamedPath))) {
        await fs_1.promises.rename(configPath, renamedPath);
    }
    await fs_1.promises.writeFile(configPath, `const vercelBuilder = require('@vercel/gatsby-plugin-vercel-builder/gatsby-node.js');
const gatsbyNode = require('./gatsby-node.js.__vercel_builder_backup__.js');

const origOnPostBuild = gatsbyNode.onPostBuild;

gatsbyNode.onPostBuild = async (args, options) => {
  if (typeof origOnPostBuild === 'function') {
    await origOnPostBuild(args, options);
  }
  await vercelBuilder.onPostBuild(args, options);
};

module.exports = gatsbyNode;
`);
}
